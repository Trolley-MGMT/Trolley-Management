name: AKS Deployment
on:
  repository_dispatch:
    types: aks-build-api-trigger

jobs:
  deploy-aks-cluster:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9


      - name: Echo the values
        run: |
          echo "cluster_name is: ${{ github.event.client_payload.cluster_name }}"
          echo "cluster_version is: ${{ github.event.client_payload.cluster_version }}"
          echo "aks_location is: ${{ github.event.client_payload.aks_location }}"
          echo "helm_installs are: ${{ github.event.client_payload.helm_installs }}"
          echo "expiration_time is: ${{ github.event.client_payload.expiration_time }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AKS Deployment Script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az account show
            az aks create --resource-group myResourceGroup --location ${{ github.event.client_payload.aks_location }} --name ${{ github.event.client_payload.cluster_name }} --node-count ${{ github.event.client_payload.num_nodes }} --enable-addons monitoring --generate-ssh-keys --kubernetes-version ${{ github.event.client_payload.cluster_version }}

      - name: Post Deployment Tasks
        env:
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          KUBECONFIG: /home/runner/.kube/config

        run: |
          brew install helm
          which helm >> /tmp/helm_path
          export PYTHONPATH=$PYTHONPATH:.
          az aks get-credentials --name ${{ github.event.client_payload.cluster_name }} --overwrite-existing --resource-group myResourceGroup
          pip3 install -r requirements.txt
          python3 deployment_utils/kubernetes_post_deployment.py --cluster_type aks --project_id trolley --cluster_name ${{ github.event.client_payload.cluster_name }} --user_name pavelzagalsky --resource_group myResourceGroup --helm_installs  ${{ github.event.client_payload.helm_installs }} --region_name ${{ github.event.client_payload.aks_location }} --expiration_time ${{ github.event.client_payload.expiration_time }}

      - name: Deleting Cluster
        if: always()
        run: |
          az aks delete --name=${{ github.event.client_payload.cluster_name }} --resource-group=MyResourceGroup --yes